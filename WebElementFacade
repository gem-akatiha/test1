## What is `WebElementFacade`?
`WebElementFacade` is a **Serenity BDD** concept — it’s an enhanced wrapper around Selenium’s `WebElement`. In plain Selenium, we usually work with `WebElement` objects directly (like clicking, sending keys, etc.).  
In **Serenity**, `WebElementFacade` gives us a *richer*, *smarter* version of `WebElement`, adding helpful features like:

- **Built-in waits**: Automatically waits for elements to appear, be clickable, visible, etc. No need to manually add `ExpectedConditions`.
- **More readable methods**: Like `typeInto()`, `selectByVisibleText()`, `isVisible()`, `isCurrentlyVisible()`, `then().click()`, etc.
- **Synchronization**: It makes sure the web elements are ready before performing actions.
- **Extra functionality**: Such as easier checks for visibility, presence, enabled state, selected state, etc.
- **Fluent API**: So you can chain actions nicely.

## Basic Usage Example

```java
import net.serenitybdd.core.annotations.findby.FindBy;
import net.serenitybdd.core.pages.PageObject;
import net.serenitybdd.core.pages.WebElementFacade;

public class LoginPage extends PageObject {

    @FindBy(id = "username")
    private WebElementFacade usernameField;

    @FindBy(id = "password")
    private WebElementFacade passwordField;

    @FindBy(id = "loginBtn")
    private WebElementFacade loginButton;

    public void loginAs(String username, String password) {
        usernameField.type(username);
        passwordField.type(password);
        loginButton.click();
    }
}
```

You can see that there was no need for explicit using `waitUntilVisible`. It was handled by Serenity.

Here, you don’t need to manually wait for the element — `WebElementFacade` does that.

**What happens behind the scene**:  
- `WebElementFacade` **extends** `WebElement` and **adds Serenity-specific behavior**.
- It's generally injected via `@FindBy` and PageObjects in Serenity.

## Best Practices for `WebElementFacade`

### 1. Always Prefer `WebElementFacade`
- Use `WebElementFacade` instead of `WebElement` inside Page Objects.
- Inject it with `@FindBy` or `@FindAll`.

---

### 2. Avoid Manual Waits
**❌ Don't:**
```java
WebDriverWait wait = new WebDriverWait(driver, 10);
wait.until(ExpectedConditions.visibilityOf(element));
element.click();
```

**✅ Do:**
```java
element.click();  // WebElementFacade auto-waits
```

---

### 3. Use Fluent Assertions
- `WebElementFacade` has methods like `.shouldBeVisible()`, `.shouldBeCurrentlyEnabled()`, etc.

Example:
```java
usernameField.shouldBeVisible();
passwordField.shouldBeCurrentlyEnabled();
```

---

### 4. Chain Actions Where Possible
Example:
```java
usernameField.type("admin").then().click();
```

---

### 5. Leverage Dropdown and Select Utilities
Instead of manually selecting options:
```java
dropdown.selectByVisibleText("Option 1");
dropdown.selectByValue("opt1");
```

---

## Common Mistakes to Avoid

| Mistake | Better Approach |
|:---|:---|
| Using `WebElement` inside Serenity PageObjects | Always use `WebElementFacade` |
| Writing manual sleeps or waits | Trust Serenity's auto-wait |
| Clicking on elements immediately without checking visibility | Use `shouldBeVisible()` before critical actions |
| Writing large methods combining logic and UI actions | Keep Page Objects focused on UI, business logic in Steps |

---

## Example of Wait Handling in `WebElementFacade`

Explicit wait until text appears:
```java
messageArea.waitUntilVisible()
           .shouldContainText("Login successful");
```

Or with timeout override:
```java
usernameField.waitUntilEnabled().withTimeoutOf(5, TimeUnit.SECONDS);
```

---

## Conclusion

- **`WebElementFacade`** improves test stability, readability, and maintainability.
- **Less code** but **more robust tests**.
- **Educate team** to *always favor Serenity style* interactions over Selenium native style.

---

# Bonus: Quick Reference Table

| Action | Method |
|:---|:---|
| Type text | `.type("text")` |
| Clear and type | `.clearAndType("text")` |
| Click | `.click()` |
| Check visibility | `.shouldBeVisible()` |
| Select dropdown option | `.selectByVisibleText("option")` |
| Wait for enablement | `.waitUntilEnabled()` |
| Get text | `.getText()` |

  
**Notes:**  
1. If you use plain `WebElement` inside a Serenity test, you’ll lose the auto-wait and smarter behaviors.  
2. Always prefer `WebElementFacade` when writing Page Objects in Serenity.
